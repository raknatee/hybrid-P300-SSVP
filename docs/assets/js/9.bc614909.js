(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{407:function(t,e,a){"use strict";a.r(e);var o=a(56),r=Object(o.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"application-protopol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#application-protopol"}},[t._v("#")]),t._v(" Application Protopol")]),t._v(" "),a("h2",{attrs:{id:"offline-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#offline-mode"}},[t._v("#")]),t._v(" Offline mode")]),t._v(" "),a("ul",[a("li",[t._v("we can call it like a collecting data mode")])]),t._v(" "),a("h3",{attrs:{id:"flow-program"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flow-program"}},[t._v("#")]),t._v(" Flow program")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Open GUI (js) then set the collection name and submit it before going to next step. "),a("RouterLink",{attrs:{to:"/ml-server/#db"}},[t._v("/db")])],1)]),t._v(" "),a("li",[a("p",[t._v("Create a EEG streaming to "),a("RouterLink",{attrs:{to:"/ml-server/#eeg-offline-participant-id"}},[t._v("/eeg_offline/<PID>")]),t._v(" using EEG-client")],1)]),t._v(" "),a("li",[a("p",[t._v("Click run Experiment from GUI. A client (js) would connect to backend "),a("RouterLink",{attrs:{to:"/ml-server/#begin-offline-mode-participant-id"}},[t._v("/begin_offline_mode")])],1)]),t._v(" "),a("li",[a("p",[t._v("ML-server would store data from both GUI and EEG-client to data storage. Then, we can match signal by using timestamp.")])])]),t._v(" "),a("h2",{attrs:{id:"online-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#online-mode"}},[t._v("#")]),t._v(" Online mode")]),t._v(" "),a("h3",{attrs:{id:"flow-program-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flow-program-2"}},[t._v("#")]),t._v(" Flow program")])])}),[],!1,null,null,null);e.default=r.exports}}]);